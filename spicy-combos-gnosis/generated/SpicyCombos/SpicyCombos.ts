// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class HelpingAdded extends ethereum.Event {
  get params(): HelpingAdded__Params {
    return new HelpingAdded__Params(this);
  }
}

export class HelpingAdded__Params {
  _event: HelpingAdded;

  constructor(event: HelpingAdded) {
    this._event = event;
  }

  get comboId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get usingCredits(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get doubleHelping(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get premium(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class HelpingRemoved extends ethereum.Event {
  get params(): HelpingRemoved__Params {
    return new HelpingRemoved__Params(this);
  }
}

export class HelpingRemoved__Params {
  _event: HelpingRemoved;

  constructor(event: HelpingRemoved) {
    this._event = event;
  }

  get comboId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class PremiumIncreased extends ethereum.Event {
  get params(): PremiumIncreased__Params {
    return new PremiumIncreased__Params(this);
  }
}

export class PremiumIncreased__Params {
  _event: PremiumIncreased;

  constructor(event: PremiumIncreased) {
    this._event = event;
  }

  get comboId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get newPremium(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class SpicyCombos__balancesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    return map;
  }

  getAvailableDeposits(): BigInt {
    return this.value0;
  }

  getDepositsInUse(): BigInt {
    return this.value1;
  }

  getAvailableCredits(): BigInt {
    return this.value2;
  }

  getCreditsInUse(): BigInt {
    return this.value3;
  }
}

export class SpicyCombos__comboInfoResult {
  value0: BigInt;
  value1: BigInt;
  value2: boolean;
  value3: Address;
  value4: boolean;
  value5: BigInt;
  value6: BigInt;
  value7: boolean;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: boolean,
    value3: Address,
    value4: boolean,
    value5: BigInt,
    value6: BigInt,
    value7: boolean
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromAddress(this.value3));
    map.set("value4", ethereum.Value.fromBoolean(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromBoolean(this.value7));
    return map;
  }

  getQueueLength(): BigInt {
    return this.value0;
  }

  getPremium(): BigInt {
    return this.value1;
  }

  getActiveHelpingExists(): boolean {
    return this.value2;
  }

  getActiveHelpingOwner(): Address {
    return this.value3;
  }

  getActiveHelpingIsDoubleHelping(): boolean {
    return this.value4;
  }

  getActiveHelpingDeposits(): BigInt {
    return this.value5;
  }

  getActiveHelpingExpiration(): BigInt {
    return this.value6;
  }

  getActiveHelpingIsExpired(): boolean {
    return this.value7;
  }
}

export class SpicyCombos__helpingInfoResult {
  value0: boolean;
  value1: boolean;
  value2: boolean;
  value3: boolean;
  value4: BigInt;

  constructor(
    value0: boolean,
    value1: boolean,
    value2: boolean,
    value3: boolean,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }

  getExists(): boolean {
    return this.value0;
  }

  getIsDoubleHelping(): boolean {
    return this.value1;
  }

  getUsingCredits(): boolean {
    return this.value2;
  }

  getIsActiveHelping(): boolean {
    return this.value3;
  }

  getPremium(): BigInt {
    return this.value4;
  }
}

export class SpicyCombos extends ethereum.SmartContract {
  static bind(address: Address): SpicyCombos {
    return new SpicyCombos("SpicyCombos", address);
  }

  balances(param0: Address): SpicyCombos__balancesResult {
    let result = super.call(
      "balances",
      "balances(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new SpicyCombos__balancesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt()
    );
  }

  try_balances(
    param0: Address
  ): ethereum.CallResult<SpicyCombos__balancesResult> {
    let result = super.tryCall(
      "balances",
      "balances(address):(uint256,uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SpicyCombos__balancesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt()
      )
    );
  }

  comboInfo(
    amountDigit1: BigInt,
    amountDigit2: BigInt,
    amountZeros: BigInt,
    blocksDigit1: BigInt,
    blocksDigit2: BigInt,
    blocksZeros: BigInt
  ): SpicyCombos__comboInfoResult {
    let result = super.call(
      "comboInfo",
      "comboInfo(uint256,uint256,uint256,uint256,uint256,uint256):(uint256,uint256,bool,address,bool,uint256,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(amountDigit1),
        ethereum.Value.fromUnsignedBigInt(amountDigit2),
        ethereum.Value.fromUnsignedBigInt(amountZeros),
        ethereum.Value.fromUnsignedBigInt(blocksDigit1),
        ethereum.Value.fromUnsignedBigInt(blocksDigit2),
        ethereum.Value.fromUnsignedBigInt(blocksZeros)
      ]
    );

    return new SpicyCombos__comboInfoResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBoolean(),
      result[3].toAddress(),
      result[4].toBoolean(),
      result[5].toBigInt(),
      result[6].toBigInt(),
      result[7].toBoolean()
    );
  }

  try_comboInfo(
    amountDigit1: BigInt,
    amountDigit2: BigInt,
    amountZeros: BigInt,
    blocksDigit1: BigInt,
    blocksDigit2: BigInt,
    blocksZeros: BigInt
  ): ethereum.CallResult<SpicyCombos__comboInfoResult> {
    let result = super.tryCall(
      "comboInfo",
      "comboInfo(uint256,uint256,uint256,uint256,uint256,uint256):(uint256,uint256,bool,address,bool,uint256,uint256,bool)",
      [
        ethereum.Value.fromUnsignedBigInt(amountDigit1),
        ethereum.Value.fromUnsignedBigInt(amountDigit2),
        ethereum.Value.fromUnsignedBigInt(amountZeros),
        ethereum.Value.fromUnsignedBigInt(blocksDigit1),
        ethereum.Value.fromUnsignedBigInt(blocksDigit2),
        ethereum.Value.fromUnsignedBigInt(blocksZeros)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SpicyCombos__comboInfoResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBoolean(),
        value[3].toAddress(),
        value[4].toBoolean(),
        value[5].toBigInt(),
        value[6].toBigInt(),
        value[7].toBoolean()
      )
    );
  }

  computeComboId(
    amountDigit1: BigInt,
    amountDigit2: BigInt,
    amountZeros: BigInt,
    blocksDigit1: BigInt,
    blocksDigit2: BigInt,
    blocksZeros: BigInt
  ): BigInt {
    let result = super.call(
      "computeComboId",
      "computeComboId(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountDigit1),
        ethereum.Value.fromUnsignedBigInt(amountDigit2),
        ethereum.Value.fromUnsignedBigInt(amountZeros),
        ethereum.Value.fromUnsignedBigInt(blocksDigit1),
        ethereum.Value.fromUnsignedBigInt(blocksDigit2),
        ethereum.Value.fromUnsignedBigInt(blocksZeros)
      ]
    );

    return result[0].toBigInt();
  }

  try_computeComboId(
    amountDigit1: BigInt,
    amountDigit2: BigInt,
    amountZeros: BigInt,
    blocksDigit1: BigInt,
    blocksDigit2: BigInt,
    blocksZeros: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeComboId",
      "computeComboId(uint256,uint256,uint256,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountDigit1),
        ethereum.Value.fromUnsignedBigInt(amountDigit2),
        ethereum.Value.fromUnsignedBigInt(amountZeros),
        ethereum.Value.fromUnsignedBigInt(blocksDigit1),
        ethereum.Value.fromUnsignedBigInt(blocksDigit2),
        ethereum.Value.fromUnsignedBigInt(blocksZeros)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  computePrice(digit1: BigInt, digit2: BigInt, zeros: BigInt): BigInt {
    let result = super.call(
      "computePrice",
      "computePrice(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(digit1),
        ethereum.Value.fromUnsignedBigInt(digit2),
        ethereum.Value.fromUnsignedBigInt(zeros)
      ]
    );

    return result[0].toBigInt();
  }

  try_computePrice(
    digit1: BigInt,
    digit2: BigInt,
    zeros: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computePrice",
      "computePrice(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(digit1),
        ethereum.Value.fromUnsignedBigInt(digit2),
        ethereum.Value.fromUnsignedBigInt(zeros)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  computeValue(digit1: BigInt, digit2: BigInt, zeros: BigInt): BigInt {
    let result = super.call(
      "computeValue",
      "computeValue(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(digit1),
        ethereum.Value.fromUnsignedBigInt(digit2),
        ethereum.Value.fromUnsignedBigInt(zeros)
      ]
    );

    return result[0].toBigInt();
  }

  try_computeValue(
    digit1: BigInt,
    digit2: BigInt,
    zeros: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "computeValue",
      "computeValue(uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(digit1),
        ethereum.Value.fromUnsignedBigInt(digit2),
        ethereum.Value.fromUnsignedBigInt(zeros)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  devFund(): BigInt {
    let result = super.call("devFund", "devFund():(uint256)", []);

    return result[0].toBigInt();
  }

  try_devFund(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("devFund", "devFund():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  helpingInfo(
    amountDigit1: BigInt,
    amountDigit2: BigInt,
    amountZeros: BigInt,
    blocksDigit1: BigInt,
    blocksDigit2: BigInt,
    blocksZeros: BigInt,
    owner: Address
  ): SpicyCombos__helpingInfoResult {
    let result = super.call(
      "helpingInfo",
      "helpingInfo(uint256,uint256,uint256,uint256,uint256,uint256,address):(bool,bool,bool,bool,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountDigit1),
        ethereum.Value.fromUnsignedBigInt(amountDigit2),
        ethereum.Value.fromUnsignedBigInt(amountZeros),
        ethereum.Value.fromUnsignedBigInt(blocksDigit1),
        ethereum.Value.fromUnsignedBigInt(blocksDigit2),
        ethereum.Value.fromUnsignedBigInt(blocksZeros),
        ethereum.Value.fromAddress(owner)
      ]
    );

    return new SpicyCombos__helpingInfoResult(
      result[0].toBoolean(),
      result[1].toBoolean(),
      result[2].toBoolean(),
      result[3].toBoolean(),
      result[4].toBigInt()
    );
  }

  try_helpingInfo(
    amountDigit1: BigInt,
    amountDigit2: BigInt,
    amountZeros: BigInt,
    blocksDigit1: BigInt,
    blocksDigit2: BigInt,
    blocksZeros: BigInt,
    owner: Address
  ): ethereum.CallResult<SpicyCombos__helpingInfoResult> {
    let result = super.tryCall(
      "helpingInfo",
      "helpingInfo(uint256,uint256,uint256,uint256,uint256,uint256,address):(bool,bool,bool,bool,uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(amountDigit1),
        ethereum.Value.fromUnsignedBigInt(amountDigit2),
        ethereum.Value.fromUnsignedBigInt(amountZeros),
        ethereum.Value.fromUnsignedBigInt(blocksDigit1),
        ethereum.Value.fromUnsignedBigInt(blocksDigit2),
        ethereum.Value.fromUnsignedBigInt(blocksZeros),
        ethereum.Value.fromAddress(owner)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new SpicyCombos__helpingInfoResult(
        value[0].toBoolean(),
        value[1].toBoolean(),
        value[2].toBoolean(),
        value[3].toBoolean(),
        value[4].toBigInt()
      )
    );
  }

  minValue(): BigInt {
    let result = super.call("minValue", "minValue():(uint256)", []);

    return result[0].toBigInt();
  }

  try_minValue(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("minValue", "minValue():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get minValue_(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddHelpingCall extends ethereum.Call {
  get inputs(): AddHelpingCall__Inputs {
    return new AddHelpingCall__Inputs(this);
  }

  get outputs(): AddHelpingCall__Outputs {
    return new AddHelpingCall__Outputs(this);
  }
}

export class AddHelpingCall__Inputs {
  _call: AddHelpingCall;

  constructor(call: AddHelpingCall) {
    this._call = call;
  }

  get amountDigit1(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountDigit2(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountZeros(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get blocksDigit1(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get blocksDigit2(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get blocksZeros(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get doubleHelping(): boolean {
    return this._call.inputValues[6].value.toBoolean();
  }

  get usingCredits(): boolean {
    return this._call.inputValues[7].value.toBoolean();
  }

  get creatorOnly(): boolean {
    return this._call.inputValues[8].value.toBoolean();
  }

  get premium(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }
}

export class AddHelpingCall__Outputs {
  _call: AddHelpingCall;

  constructor(call: AddHelpingCall) {
    this._call = call;
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class IncreasePremiumCall extends ethereum.Call {
  get inputs(): IncreasePremiumCall__Inputs {
    return new IncreasePremiumCall__Inputs(this);
  }

  get outputs(): IncreasePremiumCall__Outputs {
    return new IncreasePremiumCall__Outputs(this);
  }
}

export class IncreasePremiumCall__Inputs {
  _call: IncreasePremiumCall;

  constructor(call: IncreasePremiumCall) {
    this._call = call;
  }

  get amountDigit1(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountDigit2(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountZeros(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get blocksDigit1(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get blocksDigit2(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get blocksZeros(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }

  get increaseByAmount(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }
}

export class IncreasePremiumCall__Outputs {
  _call: IncreasePremiumCall;

  constructor(call: IncreasePremiumCall) {
    this._call = call;
  }
}

export class RemoveHelpingCall extends ethereum.Call {
  get inputs(): RemoveHelpingCall__Inputs {
    return new RemoveHelpingCall__Inputs(this);
  }

  get outputs(): RemoveHelpingCall__Outputs {
    return new RemoveHelpingCall__Outputs(this);
  }
}

export class RemoveHelpingCall__Inputs {
  _call: RemoveHelpingCall;

  constructor(call: RemoveHelpingCall) {
    this._call = call;
  }

  get amountDigit1(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get amountDigit2(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amountZeros(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get blocksDigit1(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get blocksDigit2(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get blocksZeros(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class RemoveHelpingCall__Outputs {
  _call: RemoveHelpingCall;

  constructor(call: RemoveHelpingCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}

export class WithdrawDevFundCall extends ethereum.Call {
  get inputs(): WithdrawDevFundCall__Inputs {
    return new WithdrawDevFundCall__Inputs(this);
  }

  get outputs(): WithdrawDevFundCall__Outputs {
    return new WithdrawDevFundCall__Outputs(this);
  }
}

export class WithdrawDevFundCall__Inputs {
  _call: WithdrawDevFundCall;

  constructor(call: WithdrawDevFundCall) {
    this._call = call;
  }
}

export class WithdrawDevFundCall__Outputs {
  _call: WithdrawDevFundCall;

  constructor(call: WithdrawDevFundCall) {
    this._call = call;
  }
}
